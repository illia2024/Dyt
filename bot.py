import logging
import psutil
import time
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ContentType

TOKEN = "7668112308:AAE26s1lNmpDNrT4lXOJQKUnup4oDKpeEyk"  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω ADMIN_ID = 1428115542  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
start_time = time.time()
sent_messages = 0
users = set()

def format_uptime(seconds): """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.""" days = seconds // 86400 hours = (seconds % 86400) // 3600 minutes = (seconds % 3600) // 60 seconds = seconds % 60 return f"{int(days)}d {int(hours)}h {int(minutes)}m {int(seconds)}s"

@router.message(Command("start")) async def send_welcome(message: Message): """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.""" global users users.add(message.from_user.id) text = "üß™ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ / –≤—ñ–¥–µ–æ / –≥–æ–ª–æ—Å–æ–≤–µ, —ñ —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é -----> @xxqwer_x" await message.answer(text)

@router.message(lambda message: message.content_type in [ContentType.PHOTO, ContentType.VIDEO, ContentType.VOICE]) async def forward_to_admin(message: Message): """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω—É.""" global sent_messages sent_messages += 1 await message.forward(ADMIN_ID)

@router.message(Command("info_bot")) async def bot_info(message: Message): """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞).""" if message.from_user.id != ADMIN_ID: return

uptime = format_uptime(time.time() - start_time)
memory = psutil.virtual_memory().used / (1024 ** 3)
disk = psutil.disk_usage('/').used / (1024 ** 3)
start_time_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time))

text = (f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
        f"üíæ –ü–∞–º—è—Ç—å: {memory:.2f} GB\n"
        f"üíΩ –î–∏—Å–∫: {disk:.2f} GB\n"
        f"================================\n"
        f"üì∂ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {start_time_str}\n"
        f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_messages}\n"
        f"‚å®Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîÄ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="update_info")]
])

await message.answer(text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "update_info") async def update_info(callback_query: CallbackQuery): """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.""" await bot_info(callback_query.message) await callback_query.answer()

–î–æ–±–∞–≤–ª—è–µ–º router –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä

dp.include_router(router)

–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

async def main(): await dp.start_polling(bot)

if __name__ == "__main__": asyncio.run(main())

