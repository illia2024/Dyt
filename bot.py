import os
import psutil
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = '7804222340:AAHANSSZXr7qRqHTJCjV1LvbnbnPtw-DPME'

# ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π ID)
ADMIN_ID = '1428115542'

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def create_db():
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_seen TEXT,
                        messages_sent INTEGER)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS bot_info (
                        id INTEGER PRIMARY KEY,
                        uptime TEXT)''')
    conn.commit()
    conn.close()

create_db()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_data(user_id):
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user_data = cursor.fetchone()
    conn.close()
    return user_data

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def update_user_data(user_id, username):
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    user_data = get_user_data(user_id)
    if user_data:
        cursor.execute('UPDATE users SET messages_sent = messages_sent + 1 WHERE user_id = ?', (user_id,))
    else:
        cursor.execute('INSERT INTO users (user_id, username, first_seen, messages_sent) VALUES (?, ?, ?, ?)', 
                       (user_id, username, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), 0))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–ø—Ç–∞–π–º—É –±–æ—Ç–∞
def get_bot_uptime():
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute('SELECT uptime FROM bot_info WHERE id = 1')
    uptime = cursor.fetchone()
    conn.close()
    return uptime[0] if uptime else '0 days 00:00:00'

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–ø—Ç–∞–π–º—É
def update_bot_uptime():
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    uptime = str(datetime.now() - datetime.fromtimestamp(psutil.boot_time())).split('.')[0]
    cursor.execute('REPLACE INTO bot_info (id, uptime) VALUES (1, ?)', (uptime,))
    conn.commit()
    conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    update_user_data(user_id, username)
    update.message.reply_text("üî•–ü—Ä–∏–≤—ñ—Ç, —è –±–æ—Ç –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–≥–æ –∑–≤'—è–∑–∫—É, –ø—ñ–¥—Ç—Ä–∏–º—É—é –ª–∏—à–µ –í—ñ–¥–µ–æ, —Ñ–æ—Ç–æ")
    update.message.reply_text("–í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

# –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å
def admin_panel(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("üî∂–í—Å—Ç. –§–æ—Ç–æ", callback_data='set_photo')],
        [InlineKeyboardButton("üì®–†–æ–∑—Å–∏–ª–∫–∞", callback_data='send_broadcast')],
        [InlineKeyboardButton("üîÄ–Ü–Ω—Ñ–æ", callback_data='user_info')],
        [InlineKeyboardButton("‚ô®Ô∏è–ë–û–¢", callback_data='bot_info')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    if query.data == 'set_photo':
        query.edit_message_text(text="üî∂–í—Å—Ç–∞–≤—Ç–µ —Ñ–æ—Ç–æ, —è–∫–µ –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—å –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É.")
    elif query.data == 'send_broadcast':
        query.edit_message_text(text="üì®–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —á–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")
    elif query.data == 'user_info':
        query.edit_message_text(text="üîÄ–í–≤–µ–¥—ñ—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –π–æ–≥–æ ID.")
    elif query.data == 'bot_info':
        memory_usage = psutil.virtual_memory().percent
        disk_usage = psutil.disk_usage('/').percent
        uptime = get_bot_uptime()
        
        bot_info = f"""
        üíæ –ü–∞–º'—è—Ç—å: {memory_usage}%
        üíΩ –î–∏—Å–∫: {disk_usage}%
        ‚òÆÔ∏è –ê–ø—Ç–∞–π–º: {uptime}
        """
        query.edit_message_text(text=bot_info)

# –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
def send_broadcast(update: Update, context: CallbackContext) -> None:
    text = update.message.text.split("\n", 1)[1] if update.message.text else ""
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    for user in users:
        context.bot.send_message(user[0], text)
    conn.close()

# –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
def handle_photo(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    update_user_data(user_id, update.message.from_user.username)
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–±–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
    photo_file = update.message.photo[-1].get_file()
    context.bot.send_photo(ADMIN_ID, photo_file.file_id)

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ
def handle_video(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    update_user_data(user_id, update.message.from_user.username)
    video_file = update.message.video.get_file()
    context.bot.send_video(ADMIN_ID, video_file.file_id)

# –Ü–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def user_info(update: Update, context: CallbackContext) -> None:
    username = update.message.text.split(' ', 1)[1]
    conn = sqlite3.connect('bot_data.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE username = ? OR user_id = ?', (username, username))
    user_data = cursor.fetchone()
    conn.close()
    
    if user_data:
        user_info_text = f"""
        üìá –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: @{user_data[1]}
        üî∏ –í–ø–µ—Ä—à–µ –∑–∞–π—à–æ–≤: {user_data[2]}
        üóØÔ∏è –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {user_data[3]}
        """
        update.message.reply_text(user_info_text)
    else:
        update.message.reply_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

def main():
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –±–æ—Ç–∞
    updater = Updater(TOKEN)

    dispatcher = updater.dispatcher

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("admin", admin_panel))

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ —Ñ–æ—Ç–æ —Ç–∞ –≤—ñ–¥–µ–æ
    dispatcher.add_handler(MessageHandler(Filters.photo, handle_photo))
    dispatcher.add_handler(MessageHandler(Filters.video, handle_video))

    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ
    dispatcher.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    updater.start_polling()

    # –ë–æ—Ç –ø—Ä–∞—Ü—é—î –¥–æ –∑—É–ø–∏–Ω–∫–∏
    updater.idle()

if __name__ == "__main__":
    main()
