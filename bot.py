import logging
import psutil
import time
from telegram import Update, Bot, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, Dispatcher

TOKEN = "7668112308:AAE26s1lNmpDNrT4lXOJQKUnup4oDKpeEyk"  # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 1428115542  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
bot = Bot(token=TOKEN)
updater = Updater(bot=bot, use_context=True)
dp = updater.dispatcher

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
start_time = time.time()
sent_messages = 0
users = set()

def format_uptime(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    days = seconds // 86400
    hours = (seconds % 86400) // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return f"{int(days)}d {int(hours)}h {int(minutes)}m {int(seconds)}s"

def start(update, context):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ."""
    global users
    users.add(update.message.from_user.id)
    text = "üß™ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ / –≤—ñ–¥–µ–æ / –≥–æ–ª–æ—Å–æ–≤–µ, —ñ —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é -----> @xxqwer_x"
    update.message.reply_text(text)

def forward_to_admin(update, context):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω—É."""
    global sent_messages
    sent_messages += 1
    update.message.forward(chat_id=ADMIN_ID)

def bot_info(update, context):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    if update.message.from_user.id != ADMIN_ID:
        return

    uptime = format_uptime(time.time() - start_time)
    memory = psutil.virtual_memory().used / (1024 ** 3)
    disk = psutil.disk_usage('/').used / (1024 ** 3)
    start_time_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time))

    text = (f"‚è≥ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}\n"
            f"üíæ –ü–∞–º—è—Ç—å: {memory:.2f} GB\n"
            f"üíΩ –î–∏—Å–∫: {disk:.2f} GB\n"
            f"================================\n"
            f"üì∂ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {start_time_str}\n"
            f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_messages}\n"
            f"‚å®Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÄ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="update_info")]
    ])

    update.message.reply_text(text, reply_markup=keyboard)

def update_info(update, context):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ."""
    bot_info(update, context)

def button(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    if query.data == "update_info":
        update_info(update, context)
    query.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
dp.add_handler(CommandHandler("start", start))
dp.add_handler(MessageHandler(Filters.photo | Filters.video | Filters.voice, forward_to_admin))
dp.add_handler(CommandHandler("info_bot", bot_info))
dp.add_handler(CallbackQueryHandler(button))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    updater.start_polling()
    updater.idle()
