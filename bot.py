import logging
import psutil
import time
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

TOKEN = "7668112308:AAE26s1lNmpDNrT4lXOJQKUnup4oDKpeEyk"  
ADMIN_ID = 1428115542  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º, –±–µ–∑ –ª–∞–ø–æ–∫

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É —Ä–æ–±–æ—Ç–∏ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
start_time = time.time()
sent_messages = 0
users = set()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞
def format_uptime(seconds):
    days = int(seconds // 86400)
    hours = int((seconds % 86400) // 3600)
    minutes = int((seconds % 3600) // 60)
    seconds = int(seconds % 60)
    return f"{days}d {hours}h {minutes}m {seconds}s"

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: Message):
    global users
    users.add(message.from_user.id)
    text = "üß¨ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ / –≤—ñ–¥–µ–æ / –≥–æ–ª–æ—Å–æ–≤–µ, —ñ —è –≤—ñ–¥–ø—Ä–∞–≤–ª—é -----> @xxqwer_x"
    await message.answer(text)

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ –≥–æ–ª–æ—Å–æ–≤–∏–º–∏
@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO, types.ContentType.VOICE])
async def forward_to_admin(message: Message):
    global sent_messages
    sent_messages += 1
    await message.forward(ADMIN_ID)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /info_bot (–¥–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message_handler(commands=['info_bot'])
async def bot_info(message: Message):
    if message.from_user.id != ADMIN_ID:
        return  # –Ø–∫—â–æ –Ω–µ –∞–¥–º—ñ–Ω, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –∑–∞–ø–∏—Ç

    uptime = format_uptime(time.time() - start_time)
    memory = psutil.virtual_memory().used / (1024 ** 3)
    disk = psutil.disk_usage('/').used / (1024 ** 3)
    start_time_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(start_time))

    text = (f"‚è≥ –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime}\n"
            f"üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ: {memory:.2f} GB\n"
            f"üíΩ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫—É: {disk:.2f} GB\n"
            f"================================\n"
            f"üì∂ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π: {start_time_str}\n"
            f"üì® –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {sent_messages}\n"
            f"‚å®Ô∏è –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}")

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîÄ –û–Ω–æ–≤–∏—Ç–∏", callback_data="update_info")
    )

    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–Ω–æ–≤–∏—Ç–∏"
@dp.callback_query_handler(lambda c: c.data == "update_info")
async def update_info(callback_query: types.CallbackQuery):
    await bot_info(callback_query.message)
    await callback_query.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
